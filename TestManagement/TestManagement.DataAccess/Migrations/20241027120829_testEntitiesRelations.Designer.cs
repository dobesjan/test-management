// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestManagement.DataAccess.Context;

#nullable disable

namespace TestManagement.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241027120829_testEntitiesRelations")]
    partial class testEntitiesRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestManagement.Models.Filters.TestLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestLabels");
                });

            modelBuilder.Entity("TestManagement.Models.Teams.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.ProjectHasTestLabel", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TestLabelId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "TestLabelId");

                    b.HasIndex("TestLabelId");

                    b.ToTable("ProjectHasTestLabel");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.Results.TestCaseResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.Property<int>("TestRunStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestCaseResults");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.Results.TestStepResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TestStepId")
                        .HasColumnType("int");

                    b.Property<int>("TestStepRunResult")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestStepId");

                    b.ToTable("TestStepResults");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestSuiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestSuiteId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestCaseHasTestLabel", b =>
                {
                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.Property<int>("TestLabelId")
                        .HasColumnType("int");

                    b.HasKey("TestCaseId", "TestLabelId");

                    b.HasIndex("TestLabelId");

                    b.ToTable("TestCaseHasTestLabel");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestCaseHasTestStep", b =>
                {
                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.Property<int>("TestStepId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("TestCaseId", "TestStepId");

                    b.HasIndex("TestStepId");

                    b.ToTable("TestCaseHasTestSteps");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepIdentifier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestSteps");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestSuite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TestSuites");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestSuiteHasLabel", b =>
                {
                    b.Property<int>("TestSuiteId")
                        .HasColumnType("int");

                    b.Property<int>("TestLabelId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("TestSuiteId", "TestLabelId");

                    b.HasIndex("TestLabelId");

                    b.ToTable("TestSuiteHasLabels");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.ProjectHasTestLabel", b =>
                {
                    b.HasOne("TestManagement.Models.TestCases.Project", "Project")
                        .WithMany("ProjectHasTestLabels")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestManagement.Models.Filters.TestLabel", "TestLabel")
                        .WithMany("ProjectHasTestLabels")
                        .HasForeignKey("TestLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TestLabel");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.Results.TestCaseResult", b =>
                {
                    b.HasOne("TestManagement.Models.TestCases.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.Results.TestStepResult", b =>
                {
                    b.HasOne("TestManagement.Models.TestCases.TestStep", "TestStep")
                        .WithMany()
                        .HasForeignKey("TestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestStep");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestCase", b =>
                {
                    b.HasOne("TestManagement.Models.TestCases.TestSuite", "TestSuite")
                        .WithMany("TestCases")
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestSuite");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestCaseHasTestLabel", b =>
                {
                    b.HasOne("TestManagement.Models.TestCases.TestCase", "TestCase")
                        .WithMany("TestCaseHasTestLabel")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestManagement.Models.Filters.TestLabel", "TestLabel")
                        .WithMany("TestCaseHasTestLabel")
                        .HasForeignKey("TestLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");

                    b.Navigation("TestLabel");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestCaseHasTestStep", b =>
                {
                    b.HasOne("TestManagement.Models.TestCases.TestCase", "TestCase")
                        .WithMany("TestCaseHasTestSteps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestManagement.Models.TestCases.TestStep", "TestStep")
                        .WithMany("TestCaseHasTestSteps")
                        .HasForeignKey("TestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");

                    b.Navigation("TestStep");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestSuite", b =>
                {
                    b.HasOne("TestManagement.Models.TestCases.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestSuiteHasLabel", b =>
                {
                    b.HasOne("TestManagement.Models.Filters.TestLabel", "TestLabel")
                        .WithMany("TestSuiteHasLabels")
                        .HasForeignKey("TestLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestManagement.Models.TestCases.TestSuite", "TestSuite")
                        .WithMany("TestSuiteHasLabels")
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestLabel");

                    b.Navigation("TestSuite");
                });

            modelBuilder.Entity("TestManagement.Models.Filters.TestLabel", b =>
                {
                    b.Navigation("ProjectHasTestLabels");

                    b.Navigation("TestCaseHasTestLabel");

                    b.Navigation("TestSuiteHasLabels");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.Project", b =>
                {
                    b.Navigation("ProjectHasTestLabels");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestCase", b =>
                {
                    b.Navigation("TestCaseHasTestLabel");

                    b.Navigation("TestCaseHasTestSteps");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestStep", b =>
                {
                    b.Navigation("TestCaseHasTestSteps");
                });

            modelBuilder.Entity("TestManagement.Models.TestCases.TestSuite", b =>
                {
                    b.Navigation("TestCases");

                    b.Navigation("TestSuiteHasLabels");
                });
#pragma warning restore 612, 618
        }
    }
}
